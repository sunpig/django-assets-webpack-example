"""
Django settings for example_project project.

Generated by 'django-admin startproject' using Django 1.11.

For more information on this file, see
https://docs.djangoproject.com/en/1.11/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/1.11/ref/settings/
"""

import os


def env_var(key, default=None):
    """Retrieve env vars and makes Python boolean replacements"""
    val = os.environ.get(key, default)
    if val == 'True':
        val = True
    elif val == 'False':
        val = False
    return val


# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/1.11/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = env_var('PROJECT_SECRET_KEY', 'aaaa')

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = []

# Application definition

INSTALLED_APPS = [
    # Django apps
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',

    # Third-party apps

    # Project apps
    'app1',
    'app2',
    'sitewide',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'example_project.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [
            os.path.join(BASE_DIR, 'example_project/templates'),
        ],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'example_project.wsgi.application'


# Database
# https://docs.djangoproject.com/en/1.11/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': env_var('PROJECT_DATABASE_ENGINE', 'django.db.backends.postgresql'),
        'NAME': env_var('PROJECT_DATABASE_NAME', ''),
        'USER': env_var('PROJECT_DATABASE_USER', ''),
        'PASSWORD': env_var('PROJECT_DATABASE_PASSWORD', ''),
        'HOST': env_var('PROJECT_DATABASE_HOST', '127.0.0.1'),
        'PORT': env_var('PROJECT_DATABASE_PORT', '5432'),
    }
}


# Password validation
# https://docs.djangoproject.com/en/1.11/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/1.11/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files pipeline:
# 1) Write uncompiled static code (sass, css, js) in the normal /static directory within each app
# 2) gulp compiles the static assets to build/static/dev
# 3) django dev web server will grab static assets from here
# 4) For production deployments, run the `collectstatic` command
# 5) This will collect all static assets into build/static/prod
# 6) The directory build/static/prod gets moved to the deploy target
# 7) nginx will serve


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/1.10/howto/static-files/
# This is the path that clients will see when they request a static
# file. In development, the dev server will listen for these URLs and
# serve the appropriate thing. In production, nginx has a location
# block for this path, and serves the files directly from disk without
# having to talk to the app.
STATIC_URL = '/static/'

# We want to use compiled/generated static files in development. The gulp task
# runner is responsible for making dev builds and putting the assets here.
# By making them part of STATICFILES_DIRS, django knows to try these folders
# as well as the /static/ folders inside apps when looking for static files.
STATICFILES_DIRS = [
    os.path.join(BASE_DIR, '..', 'build/static/dev')
]
